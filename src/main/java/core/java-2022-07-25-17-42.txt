10 - Можливості нової Java 17 Огляд CompletableFuture JVM мови
[in-KB java-2022-07-25-17-42]

https-//www.youtube.com/watch?v=VM9tEmYwLDY
Можливості нової Java 17. Огляд CompletableFuture. JVM мови.
t 1-21-32








00-00...04-56

нарезка, не конспектировать








05-32...12-18

новые методы в Optional

метод toList() в Stream, но та коллекция, что на выходе - immutable,
потому что возвращается unmodifiableList

mapMulti








12-25...14-18

в 15-й версии появились текстовые блоки

String large = """
               select 1;
               select 2;
               select 3;
               """;

можно на стринге вызвать лампочку и injest language
и прописать sql - будет подсветка синтаксиса








14-20...16-59

Record

ограниченный класс

convert recod to class - и JVM сгенерирует public final class без сеттеров








18-11...24-28

улучшенный instanceof

кастинг теперь делаемтся в самой строке
instanceof String s

новый switch

case 1 -> sout("one");
case 2 -> sout("two");

switch + pattern matching

case String a  -> Integer.parseInt(s);
case Integer i -> i;

yield
это return из switch








24-28...29-07

Sealed class/interface
позволяет ограничивать то, какие классы могу от него происходить

+1 к секьюрити

public sealed class Parent permits ChildA, ChildB

public final class ChildA extends Parent

класс Child не может быть НЕфинальным классом,
потому что его тогда могут заэкстендить








29-10...30-53

для чего запускать код в новом потоке

чтоб не блокировать текущий поток, чтоб он не ждал








30-58...31-42
32-02...33-35

обзор CompletableFuture

API для написания кода в асинхронном стиле
и простого запуска новых потоков

CompletableFuture
 .runAsync(sout)
 .join();

по умолчанию CompletableFuture работает на common fokr/join pool








33-37...38-33

асинхронный стиль - мы пишем код, который нужно выполнить,
но он не выполняется императивно в данный момент

в какой-то момент придут данные и тогда с ними нужно сделать то-то

код в асинхронном стиле

supplyAsync(Supplier) возвращает CompletableFuture<String>,
т.е. у меня есть нечто, что в будущем будет стрингом

CompletableFuture нужен для построения асинхронного пайплайна действий

CompletableFuture
 .supplyAsync(() -> "string")
 .thenApply(Integer::parseInt)
 .thenAccept(sout);

главная фишка в том, что текущий поток,
который создаёт CompletableFuture не блокируется








38-48...42-12

CompletableFuture передаёт всю логику в fork/join pool

если нужно подождать, то делаем
сompletableFuture.join();

если ждать не нужно, то и джойниться не нужно

используем CompletableFuture, если нужно описать некую логику
и при этом не блокировать текущий поток, в котором мы это всё описываем

CompletableFuture появился в 8-й джавы








40-15...44-05
44-16...45-05

обработка исключений в пайплайне

exeptionally(anyRuntimeException)

итог
CompletableFuture - самый простой способ запустить что-угодно в новом потоке

если значение возвращать НЕ нужно
CompletableFuture.runAsync(...)

если значение возвращать НУЖНО
CompletableFuture.supplyAsync(...)

на асинхронный пайплайнах работает всё реактивное программирование








45-07...52-08

другие JVM языки

4 самых популярных:
Groovy  (2003) - inspired by Python
Scala	(2004) - OOP + Functionl
Clojure	(2007) - inspired by LISP
Kotlin	(2011) - by JetBrains

код на этих языках компилируется в байткод, который работает на JVM

idea была написана на Java, а сейчас написана на Kotlin

Kotlin разработал российский программист из JetBrains,
JetBrains закрыли бизнес в росии и осудили нападение на Украину,
всё норм, на Eclipse можно не переходить

Gradle написан на Groovy

Kotlin - официальный язык разработки Android








52-10...52-59
53-10...

обзор Kotlin

упор Kotlin - сделать как можно быстрее и короче

код можно написать миллионами вариантов

примеры кода на Kotlin

до сих
54-04


















55-02

Функції (Kotlin)





59-41

Декларативна робота з колекціями (Kotlin)





01-01-09

Ключове слово it (Kotlin)





01-01-46

Data класи (Kotlin)





01-01-46

Функції розширення (Extension function)





01-01-46

let – функція перетворення (Kotlin)





01-09-55

Що важливо памʼятати про мову?





01-10-50

Огляд модуля Fundamentals





01-12-37

Для чого нам потрібні основи?





01-14-54

Як правильно вирішувати робочі задачі?





01-17-03

Алгоритм вирішення проблеми





01-20-47

У вас є все для того, щоб навчитися!
