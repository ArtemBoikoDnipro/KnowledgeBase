+07 - Глибоко про Функціональне Програмування в Java
{t 1-01-31} [coded in-KB func-2022-07-22-10-27-00]

https-//www.youtube.com/watch?v=qMgBfTWFMtI
Глибоко про Функціональне Програмування в Java
t 1-01-30








03-47...08-01

как эволюционирует Java (JCP, JSR)

JCP
Java Community Process
процесс изменения джавы

JSR
Java Specification Request
описывает что люди хотят добавить к спецификации джавы








08-01...10-00

аочему важно иметь глубокие знания и сильные навыки

когда есть сильные технические навыки,
можно сосредоточиться в проекте на важном,
а не проводить жизнь в эксепшенах, гуглинге, stackoverflow








10-00...12-07

лямбды

до лямбд мы не могли передать функцию как аргумент метода
и не могли сохранить функцию в переменную,
мы могли передать только объект или примитив

сейчас же мы тоже не можем передать функцию,
мы можем передать функциональный интерфейс,
но лямбды позволяют работать с функциями как с единицами высшего порядка

и на уровне синтаксиса это выглядит как функция








12-07...13-32

что такое лямбда

Consumer - функиональный интрфейс

Consumer<String> stringConsumer =
s -> System.out.println(s);

System.out.println(s) - функция

ВАЖНО!!!
лямбда - анонимная функция,
которая имплементирует абстрактный метод функционального интерфейса

лямбда не может существовать без функционального интерфейса (ФИ)

ФИ имеет только один абстрактный метод,
но может иметь статические и дефолтные методы








13-33...14-57

базовые функциональные интерфейсы

SAM - single abstract method

FI______________SAM_____Params__Return type
Consumer<T>		accept	T		void
Supplier<T>		get		-		T
Function<T,R>	apply	T		R
Predicate<T>	test	T		boolean

BiConsumer<T, U>
BiFunction<T, U, R>
IntSupplier
BiPredicate<T, U>

если нужно написать лямбду -
берём функциональный интерфейс с пакета java.util.function,
а не пишем свой








14-57...16-05

что делать, когда в коде проблема - смотреть в код,
где проблема - там и решение








16-05...18-35

как работают лямбды

invokeDynamic
новая инструкция в JVM с 7-й версии джавы

invokeDynamic - новый метод в байт-коде

лямбды - не просто синтаксический сахар,
это новая концепция в JVM

JVM запускает байт-код, который состоит из инструкций,
которые JVM либо интерпретирует,
либо JIT-compiler компилирует в машинный оптимизированный код

байт-код - инструкции для JVM после компиляции исходного кода








18-45...20-13

разбор байт-кода лямбд

INVOKE***
эта инструкция означает вызов метода, но вызов по-разному

до 7-й джавы было 4 вида инструкций вызова метода,
добавилась 5-я (INVOKEDYNAMIC)

INVOKESPECIAL
Invoke instance method;

INVOKESTATIC
Invoke a class (static) method

INVOKEVIRTUAL
Invoke instance method, но если идёт переопределение метода,
и через родительский класс вызываем метод подкласса

INVOKEINTERFACE
Invoke interface method

добавился
INVOKEDYNAMIC
Invoke dynamic method








20-48...26-41

INVOKESTATIC

если меняем вызов анонимного метода на лямбду, то появляется
private static synthetic lambda$

работает LambdaMetaFactory

когда мы используем лямбду, то компилятор
добавляет приватный статический метод (private static method)

проверить это можно вызвав на объекте типа Class метод getDeclaredMethods()

INVOKEDYNAMIC - инструкция, которая позволяет отложить имплементацию
на более поздний этап и добавляет новую прослойку

и сейчас лямбда имплементируются через приватный статический метод,
в котором отрабатывает логика, которую мы прописали в лямбде

и при вызове .accept вызывается этот private static method








27-10...30-01

Ссылка на метод (Method reference)

в лямбде можно не вызывать метод, а сделать ссылку на этот метод

Consumer<String> stringSupplier =
s -> System.out.println(s);
Consumer<String> stringSupplier =
System.out::println;

это можно сделать, если 1-2 параметра,
которые мы просто передаём некому методу

1. Ссылка на статический метод через класс

(Class:staticMethodName)

Function<Integer, Integer> abs =
i -> Math.abs(i);
Function<Integer, Integer> refAbs =
Math::abs;








30-01...36-30
37-02...37-56
39-18...40-32
41-42...42-12

2. Ссылка на нестатический метод через конкретный объект

(obj:methodName)

IntSupplier intSupplier =
ThreadLocalRandom.current()::nextInt;

3. Ссылка на нестатический метод через класс

(Class:methodName)

Function<String, String> stringFunction =
String::toUpperCase;








42-40...46-23

Function<Integer, String> substringFunction = "hello"::substring;

String subHello =
substringFunction.apply(1); // ello

если же ссылка на класс, то всегда
на один параметр больше нужно передавать лямбде,
так как нужно передать объект класса
(потому что метод нестатический)

BiFunction<String, Integer, String> substringBiFunction =
String::substring;

substringBiFunction.apply(hello, 1); //ello

hello - это тот объект, который требуется передать,
когда ссылаемся на нестатический метод через класс, а не объект








46-25...48-31

разбор байт-код ссылки на метод (method reference)

View
Show bytecode

если НЕ method reference, а лямбда,
то в байт-коде видим приватный статический метод,
в котором реализация лямбды

если method reference, то в байт-коде уже нет
приватного статического метода

поэтому method reference - это не только лучше
с точки зрения читабельности, и это не просто синтаксический сахар,
поскольку через INVOKEDYNAMIC JVM прилинкует инстанс
нашего функционального интерфейса НЕ К СГЕНЕРИРОВАННОМУ СТАТИЧЕСКОМУ МЕТОДУ,
а прямо к методу, который описан в method reference

итого получаем оптимизация по производительности,
постольку JVM не нужно создавать новый статический метод








48-31...53-53

код писал в классе
HighOrderFunction_KB

функция высшего порядка
такая функция, которая получает на вход
в качестве параметра функцию и возвращает функцию

т.е. это функции, которые позволяют конструировать новые функции

Function<Function<String, Integer>, Predicate<String>> highOrderFunction;

функции высшего порядка - техника функционального программирования,
позволяющая конструировать функции








54-09...59-15

код писал в классе
FunctionComposition_KB

композиции функции
function composition

f(x), g(x) -> f(g(x))

square.compose(increment)
сначала вызывается increment, потом square

square.andThen(increment)
сначала вызывается square, потом increment

в реальности это может использоваться как цепочка сравнений:

accounts
.sort(
Comparator.comparing(Account::getFirstName)
.thenComparing(Account::getLastName));

Comparator.comparing(...).thenComparing(...)
эта конструкция образует один компаратор, но композитный








59-23...1-01-10

есть много композиций в предикатах

predicate1.and(predicate2)








всё (coded)
----------







