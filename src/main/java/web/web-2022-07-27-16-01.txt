+12 - Як дані передаються в мережі, Java Networking, Сокети, TCP, IP, HTTP, JSON
{t 1-06-57} [in-KB web-2022-07-27-16-01]

https-//www.youtube.com/watch?v=5_SxU_U09og
Як дані передаються в мережі? Java Networking- Сокети, TCP/IP, HTTP, JSON
t 1-06-57








00-00...03-05

нарезка, не конспектировать








04-04...05-38

сетевая архитектура

внизу физическая реализация

над ней
Network layer (IP)
маршрутизация в сети

над ней
Transport Layer (TCP/UDP)

TCP гарантирует доставку данных (деление на пакеты, проверка хэш-сумм)

ещё выше
Socket layer

ещё выше
SSL layer (Secure Socket layer)
шифрование данных

ещё выше
HTTP или HTTPS (если есть SSL)








05-38...07-04

мы работаем от уровня Sockets и выше,
TCP и IP уровни не трогаем, незачем

но поскольку у нас поверх джавы работает Spring,
то мы и напрямую с сокетами не работаем








07-07...07-41

Network Socket
гнездо сети - конечная точка, к которой можно подключиться

состоит из 3-х элементов:
-HOST (IP-адрес)
-PORT
-PROTOCOL

даём хост, даём IP, договариваемся, что общаемся
через такой-то протокол, и можно обмениваться данными








07-45...11-22

демо по сокетах

есть в jdk пакет java.net, в нём есть класс ServerSocket

java.netпакет для работы с сетью

реализуем сервер

задача - открыть сокет, который будет получать запросы

new ServerSocket(8899);

while (true)
serverSocket.accept()
принятие запросов клиента








11-25...14-07

как читать данные из сокета

socket.getInputStream();

bifferedReader.readLine();

socket.getInetAdress().getHostAdress()
и будет выводиться хост клиента








15-28...17-32

реализуем клиент

как писать данные в сокет

уже не ServerSocket

new Socket("host", 8899);

socket.getOutputStream();

bufferedWriter.write("message\n");
bufferedWriter.flush();








19-26...20-05
20-58...21-42

делаем коллекцию айпишников пользователей

clientSocket.getInetAdress().getHostAdress()

CompletableFuture.runAsync(()->...)








23-01...24-40
24-59...25-08
25-47...27-15

делаем сервер многопоточным

Executors.newFixedThreadPool(40);
executor.execute(()->...);

flush() закрывает сокет

клиент может заблокировать не порт, а сокет








28-05...28-35

хост передаём строкой
"0.0.0.0"

а порт интом








30-02...30-10
32-04...33-45
34-02...36-32

экспериментируем...

соккеты нужно accept в новых потоках,
чтобы один клиент не заблокировал сокет

сервлеты коммуницируют с клиентом через сокеты

т.е. открывается сокет, есть буферы,
в них записывают, с них читают, они флашатся и т.д.

это мы работали с TCP сокетом

TCP - transport control protocol
UDP - user dataground protocol

TCP гарантирует доставку целостных данных








36-33...38-18

как данные передеются в сети

типы коммуникации

mobile app - server app
   web app - server app
server app - server app
mobile app - db

вся коммуникация происходит через сеть интернет (шлём данные по сокетам)








38-22...39-43

JSON
типичный формат данных

JavaScript Object Notation

это легковесный, простой, человекочитаемый формат передачи данных

он используется по умолчанию

но когда мы шлём запрос в БД,
то мы общаемся по протоколу jdbc, это другое, там не JSON








39-47...41-02

конвертация JSON/JavaObject

Marshalling/Unmarshalling

Marshalling:
JSON -> JavaObject

Unmarshalling:
JavaObject -> JSON

самый популярные библиотеки на java,
позволяющие такую конвертацию: Jackson, Gson

обе библиотеки работают на базе Reflection API








41-04...46-28

реализуем свой JSON конвертер

@Data
генерирует геттеры/сеттеры

2 подзадачи:
1) распарсить строку, повытягивать данные
2) сложить эти данные в поля объекта








46-30...48-50

магии нет, понимание как работает
фреймворк/библиотека даёт уверенность








48-51...50-42

обзор HTTP протокола

HTTP - протокол, который работает поверх TCP

протокол - договорённость о том как мы пересылаем данные

GET /users?name=John HTTP/1.1
HOST localhost:8080
Accept: text/html, application/json

HTTP/1.1
означает ткстовый формат, т.е. мы посылаем текст








50-43...51-31

POST ...
...
Content-type: application/json

{
  body
}

body - тело запроса








51-31...55-35

HTTP протокол состоит из
-метод
-URL
-Host
-Headers

headers
это метаинформация о запросе/ответе

HTTPS - это тот же HTTP, но поверх секьюрных сокетов (SSL) -
сервер должен установить сертификат,
потом идёт сертифицированное соединение, данные зашифрованы

HTTP/2
в нём посылаем бинарные данные








55-42...1-00-11

Q&A по HTTP

что значит "работает поверх ..."

302 redirect

как написать свой Tomcat








1-00-24...1-01-56

что мы обычно делаем на проектах

или сделать эндпойнт или сделать вызов на чей-то эндпойнт

чтобы вызвать чей-то эндпойнт
restTemplate
WebClient








1-01-56...1-03-00
1-03-10...1-03-55

задание - найти картинку с наибольшим размером

прочитать хедер ContentLength

url.openConnection().getContentLength();








1-04-12...1-06-45

для чего мне всё это знать








всё
----------







